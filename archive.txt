//import kaboom from "kaboom";
kaboom();

const FLOOR_HEIGHT = 48;
const JUMP_FORCE = 800;
const SPEED = 480;
const VAR = 1;
const FALL_DEATH = 2400
JUMPS =0;


loadSprite("ghosty", "/sprites/enemy.png")
loadSprite("spike", "/sprites/spike.png")
loadSprite("grass", "/sprites/grass.png")

loadSprite("portal", "/sprites/grass.png")
loadSprite("coin", "/sprites/coin.png")

// custom component controlling enemy patrol movement
function patrol(speed = 60, dir = 1) {
	return {
		id: "patrol",
		require: [ "pos", "area", ],
		add() {
			this.on("collide", (obj, col) => {
				if (col.isLeft() || col.isRight()) {
					dir = -dir
				}
			})
		},
		update() {
			this.move(speed * dir, 0)
		},
	}
};

// custom component that makes stuff grow big
function big() {
	let timer = 0
	let isBig = false
	let destScale = 1
	return {
		// component id / name
		id: "big",
		// it requires the scale component
		require: [ "scale" ],
		// this runs every frame
		update() {
			if (isBig) {
				timer -= dt()
				if (timer <= 0) {
					this.smallify()
				}
			}
			this.scale = this.scale.lerp(vec2(destScale), dt() * 6)
		},
		// custom methods
		isBig() {
			return isBig
		},
		smallify() {
			destScale = 1
			timer = 0
			isBig = false
		},
		biggify(time) {
			destScale = 2
			timer = time
			isBig = true
		},
	}
};

const LEVELS = [
	[
		"                          $",
		"                          $",
		"                          $",
		"                          $",
		"                          $",
		"           $$         =   $",
		"  %      ====         =   $",
		"                      =   $",
		"                      =    ",
		"       ^^      = >    =   @",
		"===========================",
	],

];

// define what each symbol means in the level graph
const levelConf = {
	// grid size
	width:32,
	height: 32,
	// define  object as a list of components
	"=": () => [
		sprite("grass"),
		area(),
		solid(),
		origin("bot"),
	],
	"$": () => [
		sprite("coin"),
		area(),
		pos(0, -9),
		origin("bot"),
		"coin",
	],

	"^": () => [
		sprite("spike"),
		area(),
		solid(),
		origin("bot"),
		"danger",
	],

	">": () => [
		sprite("ghosty"),
		area(),
		origin("bot"),
		body(),
		patrol(),
		"enemy",
	],
	"@": () => [
		sprite("portal"),
		area({ scale: 0.5, }),
		origin("bot"),
		pos(0, -12),
		"portal",
	],
};

// initialize context



loadSprite("bg", "sprites/bg.png");



loadSound("theme", "sounds/theme.mp3");
loadSpriteAtlas("sprites/charsheet.png", {
  "player": {
    

    x:0,
    y:0,

    width:288,
    height:16,
    sliceX: 16,
    sliceY: 0,
    anims: {
      dead: { from: 0, to: 3 },
      idle: { from: 4, to: 7 },
      run: { from: 8, to: 12 },
      jump: { from: 13, to: 17 },
    }
  }
});


scene("game", ({ levelId, coins } = { levelId: 0, coins: 0 }) => {
  gravity(3200);

	// add level to scene
	const level = addLevel(LEVELS[levelId ?? 0], levelConf);
  bg = add([
	    sprite("bg", {
		   width: width(),
		   height: height(),
		    tiled: true,
      
	    }),
     
  ]);


	// add a game object to screen
	const player = add([
		sprite("player"),
		pos(0, 0),
		area(),
		scale(1),
		// makes it fall to gravity and jumpable
		body(),
		// the custom component we defined above
		big(),
		origin("bot"),
		
	]);


	// action() runs every frame
	player.action(() => {
		// center camera to player
		camPos(player.pos);
		// check fall death
		if (player.pos.y >= FALL_DEATH) {
      debug.log("ouch")
			go("lose")
		};
	});


  player.action(() => {
   
    const left =keyIsDown("left");
    const right =keyIsDown("right");
    const up =keyIsDown("up");
    const down =keyIsDown("down");
    const space =keyIsDown("space");
    
    
    if (left){
      player.play("run")
      player.flipX(true);
      player.move(-MOVE_SPEED, 0);
    };
    if (right){
      player.play("run")
      player.flipX(false);
      player.move(MOVE_SPEED, 0);
    };
    if (up){
      JUMPS = JUMPS + 1;
      if (JUMPS < 2 ){
	      player.jump(JUMP_FORCE);
      }
    };

    if (space){
      JUMPS = JUMPS + 1;
      if (JUMPS < 2 ){
	      player.jump(JUMP_FORCE);
      }
    };
  });

  debug.inspect = true;
  const music = play("theme", {
    volume: 0.005,
    loop: true
  });
 
});
scene("lose", () => {
	add([
		text("You Lose"),
	]);
	onKeyPress(() => go("game"));
});
go("game");
